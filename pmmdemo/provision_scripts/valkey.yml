#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
repo_upgrade: all

packages:
  - curl
  - jq

runcmd:
  - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - yum -y install consul
  - systemctl enable consul
  - systemctl start consul
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y pmm2-client
  - yum -y install pmm2-client
  - bash /usr/local/bin/waiter.sh readyz
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - wget --quiet https://github.com/ncabatoff/process-exporter/releases/download/v0.7.10/process-exporter_0.7.10_linux_386.rpm
  - yum -y install process-exporter_0.7.10_linux_386.rpm
  - service process-exporter start
  - bash /usr/local/bin/waiter.sh process-exporter
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"
  - amazon-linux-extras install epel
  - yum -y install valkey
  - bash /tmp/valkey-init.sh
  - systemctl enable valkey && systemctl restart valkey
  - bash /tmp/build-memtier-benchmark.sh
  - bash /tmp/install-valkey-exporter.sh
  - bash /usr/local/bin/waiter.sh valkey-exporter
  - pmm-admin add external --group=valkey --listen-port=9121 --environment="prod" --service-name="valkey-valkey" --cluster="valkey-cluster"

write_files:
  - path: /tmp/valkey-init.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      echo "maxmemory 768mb" >>/etc/valkey/valkey.conf
      echo "maxmemory-policy allkeys-lfu" >>/etc/valkey/valkey.conf
      echo "appendonly yes" >>/etc/valkey/valkey.conf

  - path: /tmp/build-memtier-benchmark.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to install Valkey benchmark tool
      cd /tmp
      yum -y install autoconf automake make gcc-c++ pcre-devel zlib-devel libmemcached-devel libevent-devel openssl-devel
      wget https://github.com/RedisLabs/memtier_benchmark/archive/refs/tags/2.1.0.tar.gz
      tar -xvzf 2.1.0.tar.gz
      cd /tmp/memtier_benchmark-2.1.0/
      autoreconf -ivf
      ./configure
      make && make install
      systemctl enable memtier-benchmark.service
      systemctl start memtier-benchmark.service

  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = false
      ui_config{
        enabled = true
      }

  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "id": "process-exporter",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [
            {
            "HTTP": "http://${fqdn}:9256/metrics",
            "ID": "process-exporter_check_http",
            "Interval": "3s",
            "Method": "GET",
            "Name": "Check for process-exporter using HTTP",
            "Notes": "Check for process-exporter using HTTP. Monitoring of per-process metrics are enabled with this service.",
            "ServiceID": "process-exporter_check_http",
            "Success_before_passing": 3,
            "Timeout": "5s"
            }
          ]
        }
      }

  - path: /etc/consul.d/valkey-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "id": "valkey-exporter",
          "name": "valkey-exporter",
          "port": 9121,
          "tags": ["${name}"],
          "checks": [
            {
            "HTTP": "http://${fqdn}:9121/metrics",
            "ID": "valkey-exporter_check_http",
            "Interval": "3s",
            "Method": "GET",
            "Name": "Check for valkey-exporter using HTTP",
            "Notes": "Check for valkey-exporter using HTTP. Monitoring of Valkey metrics are enabled with this service.",
            "ServiceID": "valkey-exporter_check_http",
            "Success_before_passing": 3,
            "Timeout": "5s"
            }
          ]
        }
      }

  - path: /tmp/install-valkey-exporter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to install Valkey exporter
      cd /tmp
      wget https://github.com/oliver006/redis_exporter/releases/download/v1.58.0/redis_exporter-v1.58.0.linux-amd64.tar.gz
      tar zxvf redis_exporter-v1.58.0.linux-amd64.tar.gz 
      cd redis_exporter-v1.58.0.linux-amd64/
      screen -S valkey-exporter -d -m ./redis_exporter

  - path: /usr/local/bin/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      service="$1"
      if [[ $service == "process-exporter" ]]; then
        # process-exporter
        while true; do
          # Get the status of the process-exporter_check_http check
          status=$(dig @127.0.0.1 -p 8600 ${name}.process-exporter.service.consul SRV | awk '/SRV.*${fqdn}\.$/ {print $1}')

          if [[ $status == "${name}.process-exporter.service.consul." ]]; then
            echo "process-exporter check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "process-exporter check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "valkey-exporter" ]]; then
        # valkey-exporter
        while true; do
          # Get the status of the valkey-exporter_check_http check
          status=$(dig @127.0.0.1 -p 8600 ${name}.valkey-exporter.service.consul SRV | awk '/SRV.*${fqdn}\.$/ {print $1}')

          if [[ $status == "${name}.valkey-exporter.service.consul." ]]; then
            echo "valkey-exporter check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "valkey-exporter check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "readyz" ]] ; then
        # PMM readyz
        while true; do
          # Check for DNS :facepalm:
          dnsstatus=$(dig pmm-server.${environment_name}.local A | awk '/A.*10.*$/ {print $1}')

          if [[ $dnsstatus == "pmm-server.${environment_name}.local." ]]; then
            echo "PMMreadyz_check_http DNS check is passing."

            # Get the status of the PMMreadyz_check_http check
            status=$(dig @127.0.0.1 -p 8600 pmmreadyz.service.consul SRV | awk '/SRV.*bastion.${environment_name}.local.$/ {print $1}')
        
            if [[ $status == "pmmreadyz.service.consul." ]]; then
              echo "PMMreadyz_check_http check is passing."
              exit 0  
            fi
          else
            echo "PMMreadyz_check_http DNS check is not passing."
          fi
          # If the check is not passing, wait for a short interval and try again
          echo "PMMreadyz_check_http check is not passing. Will retry in 1 second..."
          sleep 1
        done
      fi

  - path: /etc/valkey/memtier-run.sh
    permissions: "0744"
    content: |
      #!/bin/bash
      
      while true; do
        # 'insert only'
        /usr/local/bin/memtier_benchmark --run-count=5 --hide-histogram --rate-limiting=200 --test-time=60 --ratio=1:0 --randomize --expiry-range=1-180 --data-size-range=100-1024
        # 'read write'
        /usr/local/bin/memtier_benchmark --run-count=5 --hide-histogram --rate-limiting=200 --test-time=60 --ratio=1:4 --randomize --expiry-range=1-180 --data-size-range=100-1024
      done

  - path: /usr/lib/systemd/system/memtier-benchmark.service
    content: |
      [Unit]
      Description=memtier benchmark for valkey
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=10
      ExecStart=/etc/valkey/memtier-run.sh

      [Install]
      WantedBy=multi-user.target
