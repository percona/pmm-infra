#cloud-config
preserve_hostname: false
hostname: ${name}
fqdn: ${fqdn}
manage_etc_hosts: true
repo_upgrade: all

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /data

runcmd:
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release enable-only pxc-80 release
  - percona-release enable tools release
  - yum install -y percona-xtradb-cluster
  - percona-release enable tools pmm2-client
  - percona-release setup -y pmm2-client
  - yum install -y pmm2-client
  - systemctl enable mysql
  # - systemctl start mysql
  - bash /root/init-mysql.sh
  - timeout 120 bash -c 'until curl --request 'GET' --insecure https://${pmm_server_endpoint}/v1/readyz ; do sleep 3; done'
  - pmm-admin config --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - pmm-admin add mysql --metrics-mode=push --username=pmm-admin --password='${mysql_root_password}' --cluster='pxc-80-cluster' --replication-set='pxc-80-cluster' --environment='Prod' --query-source=perfschema --service-name=${name}

mounts:
  - ["/dev/nvme1n1", "/data", "xfs", "defaults,noatime", "0", "2"]

write_files:
  - path: /root/.my.cnf
    permissions: "0644"
    content: |
      [client]
      user=root
      password="${mysql_root_password}"

  - path: /etc/my.cnf
    permissions: "0644"
    content: |
      [mysqld]

      # Host specific replication configuration
      #
      report_host = ${fqdn}
      report_port = 3306
      server_id   = ${index}


      # Generic
      #
      datadir=/data
      socket=/var/lib/mysql/mysql.sock
      log-error=/var/log/mysqld.log
      pid-file=/var/run/mysqld/mysqld.pid
      log_error_verbosity=3


      # Config binary and slow_query logs
      #
      log-bin=percona-xtradb-cluster-{index}-bin
      binlog_format=ROW
      binlog_expire_logs_seconds=604800

      slow_query_log=ON
      slow_query_log_always_write_time=1
      slow_query_log_use_global_control=all
      log_slow_rate_limit=10
      log_slow_rate_type='query'
      log_slow_admin_statements=ON
      log_slow_replica_statements=ON
      log_slow_verbosity=full
      long_query_time=0


      # Configure statistics
      #
      userstat=ON
      performance_schema=ON
      innodb_monitor_enable=module_index

      # wsrep
      #

      # Cluster name
      wsrep_cluster_name=pxc-80-cluster

      # If wsrep_node_name is not specified,  then system hostname will be used
      wsrep_node_name=${name}

      # Cluster connection URL contains IPs of nodes. If no IP is found, this implies that a new cluster needs to be created, in order to do that you need to bootstrap this node
      wsrep_cluster_address=gcomm://percona-xtradb-cluster-0,percona-xtradb-cluster-1,percona-xtradb-cluster-2

      # Path to Galera library
      wsrep_provider=/usr/lib64/galera4/libgalera_smm.so

      # Slave thread to use
      wsrep_applier_threads=8

      # Enable logging of conflicting statements
      wsrep_log_conflicts

      # This changes how InnoDB autoincrement locks are managed and is a requirement for Galera
      innodb_autoinc_lock_mode=2

      # pxc_strict_mode allowed values: DISABLED,PERMISSIVE,ENFORCING,MASTER
      pxc_strict_mode=ENFORCING

      # disable encryption of cluster traffic
      pxc_encrypt_cluster_traffic=OFF

      # SST method
      wsrep_sst_method=xtrabackup-v2

      [sst]
      wsrep_debug=ON

      !includedir /etc/my.cnf.d/

  - path: /root/init-mysql.sh
    permissions: "0500"
    content: |
      #!/bin/bash

      # This need not be run on the replicas because replication will propagate them everywhere
      provision_users() {
        INITIAL_ROOT_PASSWORD=$(grep "root@localhost:" /var/log/mysqld.log | tail -n1 | awk '{print $NF}')

        if [ -n "$INITIAL_ROOT_PASSWORD" ]; then
          mysql --connect-expired-password -uroot -p$INITIAL_ROOT_PASSWORD -Bse "ALTER USER root@'localhost' IDENTIFIED BY '${mysql_root_password}'; FLUSH PRIVILEGES;"
          echo "Password for root@localhost successfully changed"
          break
        else
          echo "Error: Initial root password not found in /var/log/mysqld.log"
          exit 1
        fi      

        mysql --defaults-file=/root/.my.cnf -Bse "CREATE USER 'pmm-admin'@'localhost' IDENTIFIED WITH mysql_native_password BY '${mysql_root_password}'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "GRANT SELECT, PROCESS, REPLICATION CLIENT, RELOAD, BACKUP_ADMIN ON *.* TO 'pmm-admin'@'localhost'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "CREATE DATABASE IF NOT EXISTS sbtest;"
        mysql --defaults-file=/root/.my.cnf -Bse "GRANT ALL PRIVILEGES ON sbtest.* TO 'pmm-admin'@'localhost'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "CREATE USER 'sysbench-direct-pxc'@'%' IDENTIFIED WITH mysql_native_password BY '${mysql_sysbench_password}'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "GRANT ALL PRIVILEGES ON sbtest.* TO 'sysbench-direct-pxc'@'%'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "CREATE USER 'sysbench-proxysql-pxc'@'%' IDENTIFIED WITH mysql_native_password BY '${mysql_sysbench_password}'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "GRANT ALL PRIVILEGES ON sbtest.* TO 'sysbench-proxysql-pxc'@'%'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "CREATE USER proxysql@'%' IDENTIFIED WITH mysql_native_password BY '${proxysql_monitor_password}'; FLUSH PRIVILEGES;";
        mysql --defaults-file=/root/.my.cnf -Bse "GRANT ALL PRIVILEGES ON *.* TO proxysql@'%'; FLUSH PRIVILEGES;";
      }


      if [[ "${name}" == "percona-xtradb-cluster-0" ]]; then
          # If we are running on the primary node (i.e., index == 0), start the PXC instance in bootstrap mode.
          systemctl start mysql@bootstrap

          provision_users

          # Check 600 times (1200sec or 20min) if PXC is ready (all 3 nodes have joined and cluster is OPERATIONAL). Switch from bootstrapping to regular operation
          for (( i=1 ; i<=600 ; i++ )); do
              if $(mysql --defaults-file=/root/.my.cnf -h"${fqdn}" -Bse "show global status like 'wsrep_evs_state';" | grep "OPERATIONAL" >/dev/null) && \
                $(mysql --defaults-file=/root/.my.cnf -h"${fqdn}" -Bse "show global status like 'wsrep_cluster_size';" | grep "3" >/dev/null)        && \
                $(mysql --defaults-file=/root/.my.cnf -h"${fqdn}" -Bse "show global status like 'wsrep_local_state_comment';" | grep "Synced" >/dev/null); then

                  # Proceed only if we have 10 successfull checks. Avoid trigger on first occurence.
                  if [[ "$${CHECK_COUNT:=1}" -ge "10" ]]; then
                      # Stop bootstrap mode
                      systemctl stop mysql@bootstrap

                      # Start primary node and break the loop
                      systemctl start mysql
                      break
                  else
                      # Increment + sleep
                      CHECK_COUNT="$(($${CHECK_COUNT:=1} + 1))"
                      sleep 1
                  fi;
              else
                  # Wait for 2sec until next retry
                  echo "retry $${i}/600"
                  sleep 2
              fi
          done
      else
          systemctl start mysql

          # Check 300 times (600sec/10min) if Primary is ready (equalize differences in deployment times - Primary can finish pre_provisoining last).
          for (( i=1 ; i<=300 ; i++ )); do
              if $(mysql --defaults-file=/root/.my.cnf -h"${fqdn}" -Bse "show global status like 'wsrep_evs_state';" | grep "OPERATIONAL" >/dev/null); then
                  # Start secondary node and brake the loop
                  systemctl start mysql
                  break
              else
                  # Wait for 2sec until next retry
                  echo "retry $${i}/300"
                  sleep 2
              fi
          done
      fi
