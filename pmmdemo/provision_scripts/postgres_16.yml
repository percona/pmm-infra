#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
package_upgrade: true
package_update: true

packages:
  - bind-utils
  - curl

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /data

mounts:
  - ["/dev/nvme1n1", "/data", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo
  - dnf -y install consul
  - systemctl enable consul && systemctl start consul
  - dnf -y install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y pmm3-client
  - dnf -y install pmm-client
  - curl -s https://raw.githubusercontent.com/percona/pmm-infra/pmmdemo/provision_scripts/scripts/waiter.sh -o /usr/local/bin/waiter.sh
  - chmod 0755 /usr/local/bin/waiter.sh
  - bash /usr/local/bin/waiter.sh readyz ${name} ${fqdn} ${environment_name}
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - percona-release setup -y ppg-16
  - PERCONA_TELEMETRY_DISABLE=1 dnf -y install percona-postgresql16-server percona-pg-stat-monitor16
  - chown postgres:postgres /data
  - sed -i 's/\/var\/lib\/pgsql\/16\/data\//\/data/g' /usr/lib/systemd/system/postgresql-16.service
  - systemctl daemon-reload
  - /usr/pgsql-16/bin/postgresql-16-setup initdb
  - echo 'host    all             all             10.0.2.0/24             password' >> /data/pg_hba.conf
  - echo "listen_addresses = '*'" >> /data/postgresql.conf
  - echo "shared_preload_libraries = 'pg_stat_monitor'" >> /data/postgresql.conf
  - echo "pg_stat_monitor.pgsm_query_max_len = 2048" >> /data/postgresql.conf
  - echo "pg_stat_monitor.pgsm_enable_query_plan = 1" >> /data/postgresql.conf
  - systemctl start postgresql-16
  - runuser -l postgres -c 'bash /tmp/init-postgres.sh'
  - pmm-admin add postgresql --username=pmm --password='${postgres_pmm_password}' --server-url='https://admin:${pmm_password}@${pmm_server_endpoint}' --server-insecure-tls --query-source="pgstatmonitor" --environment="prod" --service-name=${name}-postgresql --cluster="postgresql-cluster" --replication-set="${environment_name}"
  - dnf -y install https://github.com/ncabatoff/process-exporter/releases/download/v0.8.5/process-exporter_0.8.5_linux_amd64.rpm
  - bash /usr/local/bin/waiter.sh process-exporter ${name} ${fqdn} ${environment_name}
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"

write_files:
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = false
      ui_config{
        enabled = true
      }

  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [{
            "http": "http://${fqdn}:9256/metrics",
            "interval": "3s",
            "success_before_passing": 3,
            "timeout": "5s"
          }]
        }
      }

  - path: /usr/local/bin/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      # File contents will be downloaded from githubcontent.com

  - path: /tmp/init-postgres.sh
    content: |
      #!/bin/bash
      psql -c "CREATE ROLE pmm WITH SUPERUSER LOGIN CONNECTION LIMIT 10 ENCRYPTED PASSWORD '${postgres_pmm_password}'"
      psql -c "CREATE ROLE sysbench WITH LOGIN CONNECTION LIMIT 100 ENCRYPTED PASSWORD '${postgres_sysbench_password}'"
      psql -c "CREATE DATABASE sbtest"
      psql -c "GRANT ALL PRIVILEGES ON DATABASE sbtest TO sysbench"
      psql sbtest -c "GRANT ALL ON SCHEMA public TO sysbench"
      psql -c "CREATE EXTENSION pg_stat_monitor"
      psql -c "select pg_reload_conf()"
