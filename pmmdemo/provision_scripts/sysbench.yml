#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
package_upgrade: true
package_update: true

packages:
  - bind-utils
  - curl

runcmd:
  - dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - dnf -y install consul
  - systemctl enable consul && systemctl start consul
  - dnf -y install https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y ps-80
  - dnf -y install percona-server-client
  - percona-release setup -y pmm3-client
  - dnf -y install pmm-client
  - curl -o sysbench-1.0.20-8.el9.x86_64.rpm https://repo.percona.com/sysbench/yum/experimental/9/RPMS/x86_64/sysbench-1.0.20-8.el9.x86_64.rpm
  - dnf -y install --disablerepo=ps-80-release-x86_64 sysbench-1.0.20-8.el9.x86_64.rpm
  - mkdir -p /etc/sysbench
  - chmod +x /etc/sysbench/exec_sysbench.sh
#   - systemctl enable sysbench.ps80
#   - systemctl enable sysbench.ps84
#   - systemctl enable sysbench.pxc80
#   - systemctl enable sysbench.pgr84
  - systemctl enable sysbench.proxysql_ps80
  - systemctl enable sysbench.proxysql_ps84
  - systemctl enable sysbench.proxysql_pxc80
  - systemctl enable sysbench.proxysql_pgr84
#   - systemctl enable sysbench.haproxy.pxc80
#   - systemctl enable sysbench.haproxy.pgr84
  - systemctl enable sysbench.postgresql16
#   - systemctl start sysbench.ps80
#   - systemctl start sysbench.ps84
#   - systemctl start sysbench.pxc80
#   - systemctl start sysbench.pgr84
  - systemctl start sysbench.proxysql_ps80
  - systemctl start sysbench.proxysql_ps84
  - systemctl start sysbench.proxysql_pxc80
  - systemctl start sysbench.proxysql_pgr84
#   - systemctl start sysbench.haproxy.pxc80
#   - systemctl start sysbench.haproxy.pgr84
  - systemctl start sysbench.postgresql16
  - curl -s https://raw.githubusercontent.com/percona/pmm-infra/pmmdemo/provision_scripts/scripts/waiter.sh -o /usr/local/bin/waiter.sh
  - chmod 0755 /usr/local/bin/waiter.sh
  - bash /usr/local/bin/waiter.sh readyz ${name} ${fqdn} ${environment_name}
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - dnf -y install https://github.com/ncabatoff/process-exporter/releases/download/v0.8.5/process-exporter_0.8.5_linux_amd64.rpm
  - bash /usr/local/bin/waiter.sh process-exporter ${name} ${fqdn} ${environment_name}
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"

write_files:
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = true
      ui_config{
        enabled = true
      }

  - path: /root/.my.cnf
    content: |
      [client]
      user=root

  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [{
            "http": "http://${fqdn}:9256/metrics",
            "interval": "3s",
            "success_before_passing": 3,
            "timeout": "5s"
          }]
        }
      }

  - path: /usr/local/bin/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      # File contents will be downloaded from githubcontent.com

  - path: /etc/sysbench/exec_sysbench.sh
    content: |
      #!/bin/bash
      SYSBENCH_CFG="$${1}";
      if [[ "$${SYSBENCH_CFG}" == "" ]]; then
          exit 1;
      fi;
      check_failure() {
          if [ $? -ne 0 ]; then
            echo "Seems to be a problem with the endpoint. Sleeping so we don't spam the annotations!";
            sleep 60;
          fi
      }
      srv=$(echo $${SYSBENCH_CFG} | cut -d_ -f2 | cut -d. -f1)
      hosts=$(dig +short @127.0.0.1 -p 8600 $srv.service.consul SRV | awk -F. '{print $1}' | awk '{print $4}')
      OLTP_AVAILABLE=(oltp_delete.lua oltp_insert.lua oltp_point_select.lua oltp_read_only.lua oltp_read_write.lua oltp_update_index.lua oltp_update_non_index.lua oltp_write_only.lua)
      OLTP_PATH='/usr/share/sysbench'
      for (( ; ; )); do
          RND_OLTP_BENCH="$${OLTP_AVAILABLE[RANDOM%$${#OLTP_AVAILABLE[@]}]}";
          RND_NUM_THREADS="$(( $${RANDOM} % 17 + 8 ))";   # 8..24
          RND_EXEC_TIME="$(( $${RANDOM} % 14400 + 14400 ))";    # 4 hours and up to 8 hours
          echo -e "\nRunning: $${RND_OLTP_BENCH} - $(date "+%Y-%m-%d / %H:%M:%S")\n=======================";
          for h in $hosts; do
            pmm-admin annotate "$${SYSBENCH_CFG} - $${RND_OLTP_BENCH}" --node-name $h --tags "$${SYSBENCH_CFG},$${RND_OLTP_BENCH}"
          done
          sysbench --config-file=/etc/sysbench/"$${SYSBENCH_CFG}" --threads="$${RND_NUM_THREADS}" --time="$${RND_EXEC_TIME}" "$${OLTP_PATH}/$${RND_OLTP_BENCH}" cleanup;
          check_failure;
          sysbench --config-file=/etc/sysbench/"$${SYSBENCH_CFG}" --threads="$${RND_NUM_THREADS}" --time="$${RND_EXEC_TIME}" "$${OLTP_PATH}/$${RND_OLTP_BENCH}" prepare;
          check_failure;
          sysbench --config-file=/etc/sysbench/"$${SYSBENCH_CFG}" --threads="$${RND_NUM_THREADS}" --time="$${RND_EXEC_TIME}" "$${OLTP_PATH}/$${RND_OLTP_BENCH}" run;
          check_failure;
          sysbench --config-file=/etc/sysbench/"$${SYSBENCH_CFG}" --threads="$${RND_NUM_THREADS}" --time="$${RND_EXEC_TIME}" "$${OLTP_PATH}/$${RND_OLTP_BENCH}" cleanup;
          check_failure;
      done;

#   - path: /etc/sysbench/pgr84.cnf
#     content: |
#       mysql-db=sbtest_direct_gr
#       mysql-host=percona-server-84-gr-1
#       mysql-port=3306
#       mysql-user=sysbench-direct-percona-gr
#       mysql-password=${percona_server_84_gr_password}
#       rate=0
#       report-interval=10
#       table-size=1000000
#       tables=20
#       verbosity=0
#   - path: /etc/sysbench/ps80.cnf
#     content: |
#       mysql-db=sbtest_direct
#       mysql-host=percona-server-80-0
#       mysql-port=3306
#       mysql-user=sysbench-direct-ps
#       mysql-password=${mysql80_sysbench_password}
#       rate=0
#       report-interval=10
#       table-size=1000000
#       tables=20
#       verbosity=0
#   - path: /etc/sysbench/ps84.cnf
#     content: |
#       mysql-db=sbtest_direct
#       mysql-host=percona-server-84-0
#       mysql-port=3306
#       mysql-user=sysbench-direct-ps84
#       mysql-password=${mysql84_sysbench_password}
#       rate=0
#       report-interval=10
#       table-size=1000000
#       tables=20
#       verbosity=0
#   - path: /etc/sysbench/pxc80.cnf
#     content: |
#       mysql-db=sbtest_direct
#       mysql-host=percona-xtradb-cluster-1
#       mysql-port=3306
#       mysql-user=sysbench-direct-pxc
#       mysql-password=${percona_xtradb_cluster_80_password}
#       rand-type=pareto
#       rate=0
#       report-interval=10
#       table_size=1000000
#       tables=20

  - path: /etc/sysbench/postgresql-16.cnf
    content: |
      db-driver=pgsql
      pgsql-host=postgresql-16
      pgsql-port=5432
      pgsql-user=sysbench
      pgsql-password=${postgres_sysbench_password}
      psql-db=sbtest
      rate=0
      report-interval=10
      verbosity=0

  - path: /etc/sysbench/proxysql_percona-server-84-gr.cnf
    content: |
      mysql-db=sbtest_proxysql_gr
      mysql-host=proxysql
      mysql-port=3306
      mysql-user="sysbench-proxysql-percona-gr"
      mysql-password=${percona_server_84_gr_password}
      events=0
      rand-type=pareto
      rate=0
      report-interval=10
      table_size=1000000
      time=0
      threads=5

  - path: /etc/sysbench/proxysql_percona-server-80.cnf
    content: |
      mysql-db=sbtest_proxysql
      mysql-host=proxysql
      mysql-port=3306
      mysql-user=sysbench-proxysql-ps
      mysql-password=${mysql80_sysbench_password}
      events=0
      rand-type=pareto
      rate=0
      report-interval=10
      table_size=1000000
      time=0
      threads=5

  - path: /etc/sysbench/proxysql_percona-server-84.cnf
    content: |
      mysql-db=sbtest_proxysql
      mysql-host=proxysql
      mysql-port=3306
      mysql-user=sysbench-proxysql-ps84
      mysql-password=${mysql84_sysbench_password}
      events=0
      rand-type=pareto
      rate=0
      report-interval=10
      table_size=1000000
      time=0
      threads=5

  - path: /etc/sysbench/proxysql_percona-xtradb-cluster.cnf
    content: |
      mysql-db=sbtest_proxysql
      mysql-host=proxysql
      mysql-port=3306
      mysql-user=sysbench-proxysql-pxc
      mysql-password=${percona_xtradb_cluster_80_password}
      events=0
      rand-type=pareto
      rate=0
      report-interval=10
      table_size=1000000
      time=0
      threads=5

#   - path: /etc/sysbench/haproxy_pgr84.cnf
#     content: |
#       mysql-db=sbtest_haproxy_gr
#       mysql-host=haproxy
#       mysql-port=33061
#       mysql-user=sysbench-haproxy-percona-gr
#       mysql-password=${percona_server_84_gr_password}
#       events=0
#       rand-type=pareto
#       rate=0
#       report-interval=10
#       table_size=1000000
#       time=0
#       threads=5
# 
#   - path: /etc/sysbench/haproxy_pxc80.cnf
#     content: |
#       mysql-db=sbtest_haproxy
#       mysql-host=haproxy
#       mysql-port=3306
#       mysql-user=sysbench-haproxy-pxc
#       mysql-password=${percona_xtradb_cluster_80_password}
#       events=0
#       rand-type=pareto
#       rate=0
#       report-interval=10
#       table_size=1000000
#       time=0
#       threads=5

#   - path: /usr/lib/systemd/system/sysbench.pgr84.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona Server 8.4 Group Replication
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh pgr84.cnf
# 
#       [Install]
#       WantedBy=multi-user.target
#   - path: /usr/lib/systemd/system/sysbench.ps80.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona Server 8
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh percona-server-80.cnf
# 
#       [Install]
#       WantedBy=multi-user.target
#   - path: /usr/lib/systemd/system/sysbench.ps84.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona Server 8.4
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh percona-server-84.cnf 
# 
#       [Install]
#       WantedBy=multi-user.target
#   - path: /usr/lib/systemd/system/sysbench.pxc80.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona XtraDB Cluster 8.0
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh pxc80.cnf
# 
#       [Install]
#       WantedBy=multi-user.target

  - path: /usr/lib/systemd/system/sysbench.proxysql_pgr84.service
    content: |
      [Unit]
      Description=Sysbench for ProxySQL against Percona Group Replication 84
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=600
      ExecStart=/etc/sysbench/exec_sysbench.sh proxysql_percona-server-84-gr.cnf

      [Install]
      WantedBy=multi-user.target
  - path: /usr/lib/systemd/system/sysbench.proxysql_ps80.service
    content: |
      [Unit]
      Description=Sysbench for ProxySQL against Percona Server 8.0
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=600
      ExecStart=/etc/sysbench/exec_sysbench.sh proxysql_percona-server-80.cnf

      [Install]
      WantedBy=multi-user.target
  - path: /usr/lib/systemd/system/sysbench.proxysql_ps84.service
    content: |
      [Unit]
      Description=Sysbench for ProxySQL against Percona Server 8.4
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=600
      ExecStart=/etc/sysbench/exec_sysbench.sh proxysql_percona-server-84.cnf

      [Install]
      WantedBy=multi-user.target

  - path: /usr/lib/systemd/system/sysbench.proxysql_pxc80.service
    content: |
      [Unit]
      Description=Sysbench for ProxySQL against Percona XtraDB Cluster 8.0
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=600
      ExecStart=/etc/sysbench/exec_sysbench.sh proxysql_percona-xtradb-cluster.cnf

      [Install]
      WantedBy=multi-user.target

  - path: /usr/lib/systemd/system/sysbench.postgresql16.service
    content: |
      [Unit]
      Description=Sysbench for Percona Server for PostgreSQL 16
      After=network.target

      [Service]
      Type=simple
      Restart=on-failure
      RestartSec=600
      ExecStart=/etc/sysbench/exec_sysbench.sh postgresql16.cnf

      [Install]
      WantedBy=multi-user.target

#   - path: /usr/lib/systemd/system/sysbench.haproxy.pgr84.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona Server 8.4 Group Replication behind HAProxy
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh haproxy_pgr84.cnf
# 
#       [Install]
#       WantedBy=multi-user.target
#   - path: /usr/lib/systemd/system/sysbench.haproxy.pxc80.service
#     content: |
#       [Unit]
#       Description=Sysbench for Percona XtraDB Cluster 8.0 behind HAProxy
#       After=network.target
# 
#       [Service]
#       Type=simple
#       Restart=on-failure
#       RestartSec=600
#       ExecStart=/etc/sysbench/exec_sysbench.sh haproxy_pxc80.cnf
# 
#       [Install]
#       WantedBy=multi-user.target
