#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
package_upgrade: true
package_update: true

packages:
  - bind-utils
  - curl
  - docker
  - nmap-ncat

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /data

mounts:
  - ["/dev/nvme1n1", "/data", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - dnf -y install consul
  - systemctl enable consul
  - bash /root/consul-advertise-addr.sh
  - systemctl start consul
  - chmod +x /tmp/cert.sh
  - bash /tmp/cert.sh
  - rm /tmp/cert.sh
  - docker run -v /data:/ssl:ro,Z -v /etc/nginx.conf:/etc/nginx/nginx.conf:Z --restart always --net host --name nginx -d docker.io/library/nginx:1.21.6
  - until nc -z localhost 80; do sleep 1; done
  - docker exec nginx apt update
  - docker exec nginx apt install -y certbot python3-certbot-nginx
  - docker exec nginx certbot --nginx --non-interactive --agree-tos ${test_cert} -m ${email} -d ${domain}
  - echo "${pmm_admin_pass}" > /root/pmm-admin_password
  - chmod 400 /root/pmm-admin_password
  - dnf install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y pmm3-client
  - dnf install -y pmm-client
  - curl -s ${scripts_path}/waiter.sh -o /usr/local/bin/waiter.sh
  - chmod 0755 /usr/local/bin/waiter.sh
  - bash /usr/local/bin/waiter.sh readyz  ${name} ${fqdn} ${environment_name}
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_pass}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - dnf -y install https://github.com/ncabatoff/process-exporter/releases/download/v0.8.5/process-exporter_0.8.5_linux_amd64.rpm
  - bash /usr/local/bin/waiter.sh process-exporter ${name} ${fqdn} ${environment_name}
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"

write_files:
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      enable_syslog = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = true
      ui_config{
        enabled = true
      }

  - path: /root/consul-advertise-addr.sh
    permissions: "0700"
    content: |
      #!/bin/bash
      my_private_ip=$(ip a sh eth0 | awk '/inet / {print $2}' | awk -F '/' '{print $1}')
      echo "advertise_addr = \"$my_private_ip\"" >> /etc/consul.d/consul.hcl

  - path: /etc/consul.d/pmmreadyz-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "name": "pmmreadyz",
          "port": 443,
          "tags": ["${name}"],
          "checks": [
            {
              "http": "https://pmm-server.${environment_name}.local/v1/server/readyz",
              "interval": "1s",
              "name": "pmm_readyz_check",
              "notes": "Get PMM readyz using unauthenticated API endpoint",
              "success_before_passing": 30,
              "timeout": "1s",
              "tls_skip_verify": true,
              "status": "critical"
            },
            {
              "http": "https://admin:${pmm_admin_pass}@pmm-server.${environment_name}.local/v1/server/version",
              "interval": "1s",
              "name": "pmm_version_check",
              "notes": "Get PMM server version using authenticated API endpoint",
              "success_before_passing": 30,
              "timeout": "1s",
              "tls_skip_verify": true,
              "status": "critical"
            }
          ]
        }
      }

  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [{
            "http": "http://${fqdn}:9256/metrics",
            "interval": "3s",
            "success_before_passing": 3,
            "timeout": "5s"
          }]
        }
      }

  - path: /usr/local/bin/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      # File contents will be downloaded from githubcontent.com

  - path: /etc/nginx.conf
    content: |
      user  nginx;
      worker_processes  auto;
      error_log  /var/log/nginx/error.log notice;
      pid        /var/run/nginx.pid;
      events {
          worker_connections  1024;
      }
      http {
          map $http_upgrade $connection_upgrade {
              default upgrade;
              '' close;
          }
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;
          access_log  /var/log/nginx/access.log combined;
          sendfile        on;
          keepalive_timeout  65;
          gzip  on;

          # redirect all to https
          server {
              listen 80 default_server;
              server_name _;
              return 301 https://$host$request_uri;
          }

          # external access
          server {
              listen          443 ssl http2 default_server;
              server_name     ${domain};
              proxy_http_version 1.1;
              proxy_set_header Connection $connection_upgrade;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Host $http_host;
              ssl_certificate /ssl/cert/certificate.crt;
              ssl_certificate_key /ssl/cert/certificate.key;
              ssl_trusted_certificate /ssl/cert/ca-certs.pem;
              ssl_dhparam /ssl/cert/dhparam.pem;
              ssl_protocols TLSv1.2 TLSv1.3;
              location = /robots.txt { return 200 "User-agent: *\nDisallow: /\n"; }
              location / {
                  proxy_pass      https://pmm_server;
              }
          }
          upstream pmm_server {
              server pmm-server.${environment_name}.local:443;
          }
      }

  - path: /tmp/cert.sh
    permissions: "0400"
    content: |
      #!/bin/sh

      set -o errexit

      mkdir -p /data/cert/

      if [ ! -e /data/cert/dhparam.pem ]; then
          openssl dhparam -dsaparam -out /data/cert/dhparam.pem 2048
      fi

      if [ ! -e /data/cert/ca-certs.pem ]; then
          # Fetch letsencrypt chain
          curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /data/cert/ca-certs.pem
          curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /data/cert/ca-certs.pem
          curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /data/cert/ca-certs.pem
      fi

      if [ ! -e /data/cert/certificate.conf ]; then
          echo "
      [ req ]
      distinguished_name = req_distinguished_name
      prompt             = no

      [ req_distinguished_name ]
      O                  = Main Org.
      " > /data/cert/certificate.conf
      fi

      if [ ! -e /data/cert/certificate.key -o ! -e /data/cert/certificate.crt ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /data/cert/certificate.key \
              -out    /data/cert/certificate.crt \
              -config /data/cert/certificate.conf
      fi
