#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
repo_upgrade: all

packages:
  - docker
  - nmap-ncat
  - jq
  - curl

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /data

mounts:
  - ["/dev/nvme1n1", "/data", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - yum -y install consul
  - systemctl enable consul
  - bash /root/consul-advertise-addr.sh
  - systemctl start consul
  - systemctl enable docker
  - service docker start
  - usermod -a -G docker ec2-user
  - chmod +x /tmp/cert.sh
  - bash /tmp/cert.sh
  - rm /tmp/cert.sh
  - docker run -v /data:/ssl:ro -v /etc/nginx.conf:/etc/nginx/nginx.conf --restart always --net host --name nginx -d nginx:1.21.6
  - until nc -z localhost 80; do sleep 1; done
  - docker exec nginx apt update
  - docker exec nginx apt install -y certbot python3-certbot-nginx
  - docker exec nginx certbot --nginx --non-interactive --agree-tos --test-cert -m ${email} -d ${domain}
  - echo "${pmm_admin_pass}" > /root/pmm-admin_password
  - chmod 400 /root/pmm-admin_password
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y pmm2-client
  - yum install -y pmm2-client
  - bash /tmp/waiter.sh readyz
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_pass}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - wget --quiet https://github.com/ncabatoff/process-exporter/releases/download/v0.7.10/process-exporter_0.7.10_linux_386.rpm
  - yum -y install process-exporter_0.7.10_linux_386.rpm
  - service process-exporter start
  - bash /tmp/waiter.sh process-exporter
  - pmm-admin add external --group=processes --listen-port=9256 --environment="${environment_name}" --service-name="${name}-processes" --cluster="processes-cluster"

write_files:
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2
  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      enable_syslog = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = true
      ui_config{
        enabled = true
      }
  - path: /root/consul-advertise-addr.sh
    permissions: "0700"
    content: |
      #!/bin/bash
      my_private_ip=$(ip a sh eth0 | awk '/inet / {print $2}' | awk -F '/' '{print $1}')
      echo "advertise_addr = \"$my_private_ip\"" >> /etc/consul.d/consul.hcl
  - path: /etc/consul.d/pmmreadyz-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "id": "PMMreadyz",
          "name": "PMMreadyz",
          "port": 443,
          "tags": ["${name}"],
          "checks": [
            {
            "HTTP": "https://admin:${pmm_admin_pass}@pmm-server.${environment_name}.local/v1/readyz",
            "ID": "PMMreadyz_check_http",
            "Interval": "1s",
            "Method": "GET",
            "Name": "Check for PMM readyz using HTTP",
            "Notes": "Check for PMM readyz using HTTP. Client registrations can begin after this service is available.",
            "ServiceID": "pmmreadyz_check_http",
            "Success_before_passing": 30,
            "Timeout": "1s",
            "TLSSkipVerify": true
            }
          ]
        }
      }  
  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "id": "process-exporter",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [
            {
            "HTTP": "http://${fqdn}:9256/metrics",
            "ID": "process-exporter_check_http",
            "Interval": "3s",
            "Method": "GET",
            "Name": "Check for process-exporter using HTTP",
            "Notes": "Check for process-exporter using HTTP. Monitoring of per-process metrics are enabled with this service.",
            "ServiceID": "process-exporter_check_http",
            "Success_before_passing": 3,
            "Timeout": "5s"
            }
          ]
        }
      }
  - path: /tmp/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      service="$1"
      if [[ $service == "process-exporter" ]]; then
        # process-exporter
        while true; do
          # Get the status of the process-exporter_check_http check
          status=$(dig @127.0.0.1 -p 8600 ${name}.process-exporter.service.consul SRV | awk '/SRV.*${fqdn}\.$/ {print $1}')

          if [[ $status == "${name}.process-exporter.service.consul." ]]; then
            echo "process-exporter check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "process-exporter check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "proxysql" ]]; then
        # proxysql
        while true; do
          # Get the status of the Proxysql check
          status=$(dig @127.0.0.1 -p 8600 proxysql.service.consul SRV | awk '/SRV.*proxysql.${environment_name}.$/ {print $1}')

          if [[ $status == "proxysql.service.consul." ]]; then
            echo "ProxySQL check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "ProxySQL check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "readyz" ]] ; then
        # PMM readyz
        while true; do
          # Check for DNS :facepalm:
          dnsstatus=$(dig pmm-server.${environment_name}.local A | awk '/A.*10.*$/ {print $1}')

          if [[ $dnsstatus == "pmm-server.${environment_name}.local." ]]; then
            echo "PMMreadyz_check_http DNS check is passing."

            # Get the status of the PMMreadyz_check_http check
            status=$(dig @127.0.0.1 -p 8600 pmmreadyz.service.consul SRV | awk '/SRV.*bastion.${environment_name}.local.$/ {print $1}')
        
            if [[ $status == "pmmreadyz.service.consul." ]]; then
              echo "PMMreadyz_check_http check is passing."
              exit 0  
            fi
          else
            echo "PMMreadyz_check_http DNS check is not passing."
          fi
          # If the check is not passing, wait for a short interval and try again
          echo "PMMreadyz_check_http check is not passing. Will retry in 1 second..."
          sleep 1
        done
      fi
  - path: /root/.ssh/config
    content: |
      Host *
          User ec2-user
  - path: /etc/nginx.conf
    content: |
      user  nginx;
      worker_processes  auto;

      error_log  /var/log/nginx/error.log notice;
      pid        /var/run/nginx.pid;


      events {
          worker_connections  1024;
      }

      http {
          map $http_upgrade $connection_upgrade {
              default upgrade;
              '' close;
          }
          include       /etc/nginx/mime.types;
          default_type  application/octet-stream;

          access_log  /var/log/nginx/access.log combined;

          sendfile        on;

          keepalive_timeout  65;

          gzip  on;

          # redirect all to https
          server {
              listen 80 default_server;

              server_name _;

              return 301 https://$host$request_uri;
          }

          # external access
          server {
              listen          443 ssl http2 default_server;
              server_name     ${domain};

              proxy_http_version 1.1;
              proxy_set_header Connection $connection_upgrade;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Host $http_host;

              ssl_certificate /ssl/cert/certificate.crt;
              ssl_certificate_key /ssl/cert/certificate.key;
              ssl_trusted_certificate /ssl/cert/ca-certs.pem;
              ssl_dhparam /ssl/cert/dhparam.pem;

              location / {
                  proxy_pass      http://pmm_server;
              }
          }

          upstream pmm_server {
              server pmm-server.${environment_name}.local:80;
          }
      }
  - path: /tmp/cert.sh
    permissions: "0400"
    content: |
      #!/bin/sh

      set -o errexit

      mkdir -p /data/cert/

      if [ ! -e /data/cert/dhparam.pem ]; then
          openssl dhparam -dsaparam -out /data/cert/dhparam.pem 2048
      fi

      if [ ! -e /data/cert/ca-certs.pem ]; then
          # Fetch letsencrypt chain
          curl https://letsencrypt.org/certs/isrgrootx1.pem                          > /data/cert/ca-certs.pem
          curl https://letsencrypt.org/certs/lets-encrypt-x1-cross-signed.pem       >> /data/cert/ca-certs.pem
          curl https://letsencrypt.org/certs/letsencryptauthorityx1.pem             >> /data/cert/ca-certs.pem
          curl https://www.identrust.com/certificates/trustid/root-download-x3.html >> /data/cert/ca-certs.pem
      fi

      if [ ! -e /data/cert/certificate.conf ]; then
          echo "
      [ req ]
      distinguished_name = req_distinguished_name
      prompt             = no

      [ req_distinguished_name ]
      O                  = Main Org.
      " > /data/cert/certificate.conf
      fi

      if [ ! -e /data/cert/certificate.key -o ! -e /data/cert/certificate.crt ]; then
          openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /data/cert/certificate.key \
              -out    /data/cert/certificate.crt \
              -config /data/cert/certificate.conf
      fi
