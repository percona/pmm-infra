#cloud-config
preserve_hostname: false
hostname: ${name}
fqdn: ${fqdn}
manage_etc_hosts: true
repo_upgrade: all

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /data

mounts:
  - ["/dev/nvme1n1", "/data", "xfs", "defaults,nofail,noatime", "0", "2"]

runcmd:
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y psmdb-60
  - yum -y install percona-server-mongodb
  - percona-release setup -y pmm2-client
  - yum -y install pmm2-client
  - chown mongod:mongod /data/ /etc/mongo-key
  - chmod 600 /etc/mongo-key
  - systemctl enable mongod
  - systemctl start mongod
  - systemctl status mongod
  - timeout 120 bash -c 'until curl --request 'GET' --insecure https://${pmm_server_endpoint}/v1/readyz ; do sleep 3; done'
  - mongosh --port 27019 /tmp/init.js || true
  - bash /tmp/mongodb-init-rs.sh
  - pmm-admin config --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - pmm-admin add mongodb --port 27019 --username=pmm --password='${mongodb_60_pmm_user_password}' --cluster='mdb60-cluster' --replication-set='mdb60-cluster' --environment='demo' --service-name=${name} --enable-all-collectors

write_files:
  - path: /etc/mongod.conf
    content: |
      sharding:
        clusterRole: configsvr

      replication:
        replSetName: ${replica_set_name}

      storage:
        dbPath: /data
        journal:
          enabled: true

      systemLog:
        destination: file
        logAppend: true
        path: /var/log/mongo/mongod.log

      setParameter:
        logLevel: 0

      processManagement:
        fork: true
        pidFilePath: /var/run/mongod.pid

      net:
        port: 27019
        bindIp: 0.0.0.0

      operationProfiling:
        mode: all
        slowOpThresholdMs: 100
        rateLimit: 100

      security:
        keyFile: /etc/mongo-key

  - path: /etc/mongo-key
    content: |
      ${mongodb_60_keyfile}

  - path: /tmp/init.js
    content: |
      db.getMongo().setReadPref("primaryPreferred")
      rs.initiate(
        {
          _id: "${replica_set_name}",
          configsvr: true,
          members: [
            { _id : 0, host : "mongo-60-cfg-0.${route53_name}:27019", priority: 2 },
            { _id : 1, host : "mongo-60-cfg-1.${route53_name}:27019", priority: 1 },
            { _id : 2, host : "mongo-60-cfg-2.${route53_name}:27019", priority: 1 }
          ]
        }
      )

  - path: /tmp/admin.js
    content: |
      admin = db.getSiblingDB("admin")
      admin.createUser(
        {
          user: "pmm-admin",
          pwd: "${mongodb_60_pmm_admin_password}",
          roles: [ { role: "userAdminAnyDatabase", db: "admin" } ]
        }
      )

  - path: /tmp/user.js
    content: |
      db.getSiblingDB("admin").createRole({
          role: "explainRole",
          privileges: [{
              resource: {
                  db: "",
                  collection: "system.profile"
                  },
              actions: [
                  "listIndexes",
                  "listCollections",
                  "dbStats",
                  "dbHash",
                  "collStats",
                  "find"
                  ]
              }],
          roles:[]
      })
      db.getSiblingDB("admin").createUser({
        user: "pmm",
        pwd: "${mongodb_60_pmm_user_password}",
        roles: [
            { role: "explainRole", db: "admin" },
            { role: "clusterMonitor", db: "admin" },
            { role: "read", db: "local" }
        ]
      })

  - path: /root/.mongoshrc.js
    content: |
      db = connect("localhost:27019/")

  - path: /root/.bashrc
    append: true
    content: |
      alias mng='mongosh --nodb'

  - path: /tmp/mongodb-init-rs.sh
    permissions: "0500"
    content: |
      #!/bin/bash
      
      myhostname=$(hostname -f)
      
      # Wait for mongod
      for (( i=1 ; i<=100 ; i++ )); do
        mongosh --port 27019 --eval 'db.runCommand("ping").ok' -quiet 2>&1 >/dev/null
        if [ $? -eq 0 ]; then
          echo "-- Mongod appears alive"
          break
        fi
        echo "-- Waiting on mongod, retry $${i}/100"
        sleep 2
      done
      
      # Configure this mongo as a replicaset member
      mongosh --port 27019 /tmp/init.js
      
      # Wait for replicaset to have 3 members
      # Get the replicaset status. Loop through all members adding up their 'health' value (1 or 0).
      # If all 3 servers are online, health should = 3. If it doesn't, sleep and try again

      for (( i=1 ; i<=100 ; i++ )); do
        health=$(mongosh --port 27019 -quiet --eval "var m=db.adminCommand({replSetGetStatus:1}).members; var s=0; m.forEach(function(a){ s+=a.health; }); print(s);")
        if [ $? -eq 0 ]; then
          if [ $health -eq 3 ]; then
            echo "-- Found 3 healthy voting members of replicaset"
            break
          fi
        fi
        echo "-- Waiting on replicaset members, retry $${i}/100"
        sleep 2
      done
      
      # Print report to cloud log
      echo "-- ReplicaSet Members:"
      mongosh --port 27019 -quiet --eval "var m=db.adminCommand({replSetGetStatus:1}).members; m.forEach(function(a){ print(a.stateStr+':'+a.name); });"
      
      # Determine who is primary
      primary=$(mongosh --port 27019 --eval 'rs.isMaster().primary' -quiet | cut -d: -f1)
      
      echo "-- $${primary} is PRIMARY, we are $${myhostname}"
      
      # Is this host PRIMARY? If so, create the pmm-admin user and pmm user
      if [ "$${myhostname}" == "$${primary}" ]; then
        echo "-- We are PRIMARY!"
        mongosh --port 27019 /tmp/admin.js
        sleep 2
        mongosh --port 27019 -u pmm-admin -p '${mongodb_60_pmm_admin_password}' /tmp/user.js
      else
        echo "-- We are NOT primary, waiting for auth"
        # Since we are not primary, we need to wait until the primary has replicated
        # the PMM user to us, otherwise pmm add mongo will fail
        
        for (( i=1 ; i<=100 ; i++ )); do
          # This will fail until auth replicates, so we keep running the ping with auth until it no longer fails
          ret=$(mongosh --port 27019 -quiet --eval 'db.runCommand("ping").ok' -u pmm-admin -p "${mongodb_60_pmm_admin_password}" 2>&1 >/dev/null)
          if [ $? -eq 0 ]; then
            echo "-- Auth is enabled"
            break
          fi
          echo "-- Waiting on auth, retry $${i}/100"
          sleep 2
        done
      fi
