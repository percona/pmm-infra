#cloud-config
preserve_hostname: false
hostname: ${name}
fqdn: ${fqdn}
manage_etc_hosts: true
repo_upgrade: all

packages:
  - curl
  - jq

runcmd:
  - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - yum -y install consul
  - usermod -d /opt/consul consul
  - systemctl enable consul
  - systemctl start consul
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y psmdb-60
  - yum -y install percona-server-mongodb
  - percona-release setup -y pmm2-client
  - yum -y install pmm2-client
  - mkdir -p /var/run/mongo/
  - chown mongod:mongod /etc/mongo-key /var/run/mongo/
  - chmod 600 /etc/mongo-key
  - systemctl enable mongos
  - systemctl start mongos
  - timeout 120 bash -c 'until curl --request 'GET' --insecure https://${pmm_server_endpoint}/v1/readyz ; do sleep 3; done'
  - sleep 5s
  - mongosh --port 27019 /tmp/init.js
  - sleep 15s
  - mongosh --port 27019 -u pmm-admin -p '${mongodb_60_pmm_admin_password}' /tmp/users.js
  - pmm-admin config --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_password}@${pmm_server_endpoint}' ${fqdn} generic ${name}
  - pmm-admin add mongodb --username=pmm --password='${mongodb_60_pmm_user_password}' --cluster='mdb60-cluster' --environment='prod' --enable-all-collectors

write_files:

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "proxysql"]
      server = false

  - path: /etc/consul.d/mongod-service.json
    permissions: "0644"
    content: |
      {
        "service": {
          "name": "mongos",
          "tags": ["${name}"],
          "port": 27019,
          "checks": [
            {
              "args": ["mongosh", "--port", "27019", "--eval", "db.runCommand(\"ping\").ok", "-quiet"],
              "interval": "10s"
            }
          ]
        }
      }

  - path: /etc/mongos.conf
    content: |
      sharding:
        configDB: ${replica_set_name}/mongo-60-cfg-0.${route53_name}:27019,mongo-60-cfg-1.${route53_name}:27019,mongo-60-cfg-2.${route53_name}:27019

      net:
        port:	27019
        bindIp: 0.0.0.0

      systemLog:
        destination: file
        logAppend: true
        path: /var/log/mongo/mongos.log

      security:
        keyFile: /etc/mongo-key

      processManagement:
        fork: true
        pidFilePath: /var/run/mongo/mongos.pid

  - path: /etc/mongo-key
    content: |
      ${mongodb_60_keyfile}

  - path: /tmp/init.js
    content: |
      sh.addShard("shard-0/mongo-60-rs-0-0.${route53_name}:27019,mongo-60-rs-0-1.${route53_name}:27019,mongo-60-rs-0-2.${route53_name}:27019")
      sh.addShard("shard-1/mongo-60-rs-1-0.${route53_name}:27019,mongo-60-rs-1-1.${route53_name}:27019,mongo-60-rs-1-2.${route53_name}:27019")
      admin = db.getSiblingDB("admin")
      admin.createUser({
        user: "pmm-admin",
        pwd: "${mongodb_60_pmm_admin_password}",
        roles: [
            { role: "userAdminAnyDatabase", db: "admin" },
            { role: "clusterAdmin", db: "admin" }
        ]
      })

  - path: /usr/lib/systemd/system/mongos.service
    content: |
      [Unit]
      Description=High-performance, schema-free document-oriented database
      After=network.target

      [Service]
      User=mongod
      Group=mongod
      Type=forking
      ExecStart=/bin/mongos --config /etc/mongos.conf
      PIDFile=/var/run/mongo/mongos.pid
      LimitFSIZE=infinity
      LimitCPU=infinity
      LimitAS=infinity
      LimitNOFILE=64000
      LimitNPROC=64000
      LimitMEMLOCK=infinity
      TasksMax=infinity
      TasksAccounting=false

      [Install]
      WantedBy=multi-user.target

  - path: /tmp/users.js
    content: |
      db.getSiblingDB("admin").createRole({
          role: "explainRole",
          privileges: [{
            resource: { db: '', collection: '' },
            actions: [
              'collStats',
              'dbHash',
              'dbStats',
              'find',
              'listCollections',
              'listIndexes'
            ]
          },
          {
            resource: { db: '', collection: 'system.profile' },
            actions: [ 'collStats', 'dbStats', 'indexStats' ]
          }],
          roles:[]
      })
      db.getSiblingDB("admin").createUser({
        user: "pmm",
        pwd: "${mongodb_60_pmm_user_password}",
        roles: [
            { role: "explainRole", db: "admin" },
            { role: "clusterMonitor", db: "admin" },
            { role: "read", db: "local" }
        ]
      })
      db.getSiblingDB("admin").createUser({
        user: "ycsb",
        pwd: "${mongodb_ycsb_password}",
        roles: [
            { role: "readWriteAnyDatabase", db: "admin" },
            { role: "clusterManager", db: "admin" },
            { role: "enableSharding", db: "ycsb" }
        ]
      })
