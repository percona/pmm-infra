#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
package_upgrade: true
package_update: true

packages:
  - bind-utils
  - curl
  - podman
  - podman-docker
  - python3-pip

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /var/lib/containers/

mounts:
  - ["/dev/nvme1n1", "/var/lib/containers/", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - dnf config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - dnf -y install consul
  - systemctl enable consul
  - bash /root/consul-advertise-addr.sh
  - systemctl start consul
  - dnf install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y ps-80
  - dnf -y install percona-server-client
  - docker pull docker.io/percona/pmm-server:3
  - docker create -v /srv --name pmm-data docker.io/percona/pmm-server:3 /bin/true
  - docker network create pmm-net
  - docker run -d -p 443:8443 -v pmm-data:/srv:Z --name pmm-server --network pmm-net --restart always docker.io/percona/pmm-server:3
  - sleep 10s
  - docker exec pmm-server change-admin-password ${pmm_admin_pass}
  - "echo '${pmm_admin_pass}' > /root/pmm-admin-password"
  - chmod 400 /root/pmm-admin-password
  - bash /root/apply-custom-settings.sh
  - echo date > /tmp/pmm-server-up
  - percona-release setup -y pmm3-client
  - dnf -y install pmm-client
  - curl -s ${scripts_path}/waiter.sh -o /usr/local/bin/waiter.sh
  - chmod 0755 /usr/local/bin/waiter.sh
  - bash /usr/local/bin/waiter.sh readyz ${name} ${fqdn} ${environment_name}
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_pass}@${pmm_server_endpoint}' ${fqdn} generic "${name}-host"
  - dnf -y install https://github.com/ncabatoff/process-exporter/releases/download/v0.8.5/process-exporter_0.8.5_linux_amd64.rpm
  - bash /usr/local/bin/waiter.sh process-exporter ${name} ${fqdn} ${environment_name}
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"
  - bash /root/add-rds-to-pmm.sh
  - bash pip3 install ansible

write_files:
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2

  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      enable_syslog = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = true
      ui_config{
        enabled = true
      }

  - path: /root/add-rds-to-pmm.sh
    permissions: "0700"
    content: |
      #!/bin/bash

      # Discover RDS using PMM
      curl -k -X POST https://admin:${pmm_admin_pass}@localhost/v1/management/services:discoverRDS >/tmp/discovered_rds

      # Manipulate the JSON to add username, password, and enable query examples
      jq '{rds: .rds_instances[0]} \
        | .rds.username = "${rds_mysql_username}" \
        | .rds.password = "${rds_mysql_password}" \
        | .rds.disable_query_examples = false' /tmp/discovered_rds \
        >pmm_rds_mysql.json

      # Add to PMM
      curl -k -X POST https://admin:${pmm_admin_pass}@localhost/v1/management/services -d@pmm_rds_mysql.json

      exit 0

  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [{
            "http": "http://${fqdn}:9256/metrics",
            "interval": "3s",
            "success_before_passing": 3,
            "timeout": "5s"
          }]
        }
      }

  - path: /usr/local/bin/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      # File contents will be downloaded from githubcontent.com

  - path: /root/consul-advertise-addr.sh
    permissions: "0700"
    content: |
      #!/bin/bash
      my_private_ip=$(ip a sh eth0 | awk '/inet / {print $2}' | awk -F '/' '{print $1}')
      echo "advertise_addr = \"$my_private_ip\"" >> /etc/consul.d/consul.hcl

  - path: /root/playbooks/pmm_sso_playbook.yml
    permissions: "0400"
    content: |
      ---
      # This playbook contains tasks executed for pmmdemo
      - hosts: localhost
        become: no
        gather_facts: yes
        tasks:
          - name: Add posthog stats
            ansible.builtin.blockinfile:
              path: /usr/share/grafana/public/views/index.html
              insertbefore: "</head>"
              marker: "<!-- {mark} ANSIBLE -->"
              block: |
                <script>
                  !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init capture register register_once register_for_session unregister unregister_for_session getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty createPersonProfile opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing debug getPageViewId captureTraceFeedback captureTraceMetric".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
                  posthog.init('phc_Vn0gwOhJP57oTdX4Y7xqkJ4dB40j2Ti2KPVaG3s59a9', {
                    api_host: '<https://eu.i.posthog.com>',
                    persistence:'sessionStorage'
                  })
                </script>

          - name: Set Google Analytics ID
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: google_analytics_ua_id
              value: ${google_analytics_id}

          - name: Enable anonymous access (readonly)
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth.anonymous
              option: enabled
              value: "true"

          - name: Set domain name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: server
              option: domain
              value: ${full_domain}

          - name: Disable telemetry
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: reporting_enabled
              value: "false"

          - name: Disable updates
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: check_for_updates
              value: "false"

          - name: Enable alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: alerting
              option: enabled
              value: "false"

          - name: Enable secure cookies
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: security
              option: cookie_secure
              value: "true"

          - name: Set auth cookie name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_cookie_name
              value: pmm_session

          - name: Set max login duration
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_maximum_lifetime_duration
              value: 7d

          - name: Enable unified alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: unified_alerting
              option: enabled
              value: "true"

          - name: Set instance name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: DEFAULT
              option: instance_name
              value: "PMM Demo"

          - name: Enable panel alpha feature
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: panels
              option: enable_alpha
              value: "true"

          - name: Configure PMM's connection to the Portal
            when: ${oauth_enable}
            block:
            # TODO use loop instead block here
            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: enabled
                value: "true"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: name
                value: "Percona Account"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_id
                value: ${oauth_client_id}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_secret
                value: ${oauth_secret}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: scopes
                value: ${oauth_scopes}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: auth_url
                value: ${oauth_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: token_url
                value: ${oauth_token_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: api_url
                value: ${oauth_api_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: role_attribute_path
                value: ${oauth_role_attribute_path}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth
                option: signout_redirect_url
                value: ${oauth_signout_redirect_url}

  - path: /root/upgrade-pmm-server.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      docker pull docker.io/percona/pmm-server:3
      docker stop pmm-server && docker rm pmm-server

      docker run -d -p 443:8443 -v pmm-data:/srv:Z --name pmm-server --network pmm-net --restart always docker.io/percona/pmm-server:3
      echo "PMM Server has been successfully upgraded to the next version. Don't forget to purge the old image."

      echo "Applying Grafana Settings for PMM Demo..."
      bash /root/apply-custom-settings.sh

  - path: /root/upgrade-pmm-agents.sh
    permissions: "0755"
    content: |
      #!/bin/bash

      # Get list of agent hosts, output ansible inventory format
      echo "[all]" >/root/agents_inventory
      /bin/consul catalog nodes | grep -v Node | awk '{print $1".pmmdemoprod.local"}' >>/root/agents_inventory

      # Run playbook to upgrade pmm-agent on servers
      export ANSIBLE_HOST_KEY_CHECKING=False
      /usr/local/bin/ansible-playbook -i agents_inventory upgrade_agents_playbook.yml

  - path: /root/playbooks/upgrade_agents.yml
    permissions: "0644"
    content: |
      #
      # Playbook for upgrade pmm-agent on hosts
      #

      - hosts: all
        gather_facts: no
        remote_user: rocky
        become: yes
        tasks:

        - name: Enable Percona Repo
          shell: >
            percona-release enable pmm3-client

        - name: Upgrade PMM Agent
          dnf:
            state: latest
            name: "pmm-client"
          register: restart_agent

        - name: Restart PMM Agent
          systemd:
            name: "pmm-agent"
            enabled: yes
            state: "restarted"
          when: restart_agent.changed

  - path: /root/apply-custom-settings.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      echo "Running the ansible script..."
      docker cp /root/pmm_sso_playbook.yml pmm-server:pmm_sso_playbook.yml
      docker exec pmm-server ansible-playbook -v pmm_sso_playbook.yml
      sleep 10
      docker exec pmm-server supervisorctl restart grafana
      echo "PMM settings updated."
