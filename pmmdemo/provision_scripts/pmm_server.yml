#cloud-config
fqdn: ${fqdn}
hostname: ${name}
manage_etc_hosts: true
prefer_fqdn_over_hostname: true
preserve_hostname: false
repo_upgrade: all

packages:
  - curl
  - lsof
  - nmap
  - htop
  - mc
  - jq
  - docker
  - git
  - yum-utils

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /var/lib/docker/

mounts:
  - ["/dev/nvme1n1", "/var/lib/docker/", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - systemctl enable docker
  - service docker start
  - usermod -a -G docker ec2-user
  - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - yum -y install consul
  - systemctl enable consul
  - bash /root/consul-advertise-addr.sh
  - systemctl start consul
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y ps-80
  - yum -y install percona-server-client
  - docker pull percona/pmm-server:2
  - docker create -v /srv --name pmm-data percona/pmm-server:2 /bin/true
  - docker run -d -p 443:443 -p 80:80 -v pmm-data:/srv --name pmm-server --restart always percona/pmm-server:2
  - sleep 20s
  - docker exec pmm-server change-admin-password ${pmm_admin_pass}
  - "echo '${pmm_admin_pass}' > /root/pmm-admin-password"
  - chmod 400 /root/pmm-admin-password
  - docker cp /root/ansible.yml pmm-server:/root/ansible.yml
  - docker exec pmm-server ansible-playbook -v /root/ansible.yml
  - docker exec pmm-server supervisorctl restart grafana
  - bash /root/add-rds-to-pmm.sh
  - echo date > /tmp/pmm-server-up
  - percona-release setup -y pmm2-client
  - yum -y install pmm2-client
  - bash /tmp/waiter.sh readyz
  - pmm-admin config --az="us-east-1f" --region="us-east-1" --metrics-mode=push --force --server-insecure-tls --server-url='https://admin:${pmm_admin_pass}@${pmm_server_endpoint}' ${fqdn} generic "${name}-host"
  - wget --quiet https://github.com/ncabatoff/process-exporter/releases/download/v0.7.10/process-exporter_0.7.10_linux_386.rpm
  - yum -y install process-exporter_0.7.10_linux_386.rpm
  - service process-exporter start
  - bash /tmp/waiter.sh process-exporter
  - pmm-admin add external --group=processes --listen-port=9256 --environment="prod" --service-name="${name}-processes" --cluster="processes-cluster"
  - bash /tmp/dashboard-importer.sh
#  - bash /tmp/import-dashboard-grafana-cloud.sh && touch /tmp/dashboards_imported

write_files:
  - path: /tmp/dashboard-importer.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      echo "Downloading scripts"
      wget https://raw.githubusercontent.com/Percona-Lab/pmm-dashboards/main/misc/import-dashboard-grafana-cloud.sh -O /tmp/import-dashboard-grafana-cloud.sh
      wget https://raw.githubusercontent.com/Percona-Lab/pmm-dashboards/main/misc/cleanup-dash.py -O /tmp/cleanup-dash.py
      file /tmp/import-dashboard-grafana-cloud.sh
      file /tmp/cleanup-dash.py
      chmod a+x /tmp/import-dashboard-grafana-cloud.sh
      chmod a+x /tmp/cleanup-dash.py
      sed -i 's/:admin/:${pmm_admin_pass}/' /tmp/import-dashboard-grafana-cloud.sh
      sed -i 's/172\.17\.0\.2/${fqdn}/' /tmp/import-dashboard-grafana-cloud.sh
      sed -i 's/13266 12630 12470/13266 12630 12470 14239 14636 19676 6033/' /tmp/import-dashboard-grafana-cloud.sh
  - path: /etc/resolv.conf
    permissions: "0644"
    content: |
      ; generated by #cloud-config
      search ${local_domain} ec2.internal
      options timeout:2 attempts:5
      nameserver 10.0.0.2
  - path: /root/add-rds-to-pmm.sh
    permissions: "0700"
    content: |
      #!/bin/bash
      echo "placeholder"
      exit 0
  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      enable_syslog = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "bastion"]
      server = true
      ui_config{
        enabled = true
      }
  - path: /etc/consul.d/process-exporter-check-http.json
    permissions: "0644"
    content: |
      {
        "service": {
          "address": "${fqdn}",
          "id": "process-exporter",
          "name": "process-exporter",
          "port": 9256,
          "tags": ["${name}"],
          "checks": [
            {
            "HTTP": "http://${fqdn}:9256/metrics",
            "ID": "process-exporter_check_http",
            "Interval": "3s",
            "Method": "GET",
            "Name": "Check for process-exporter using HTTP",
            "Notes": "Check for process-exporter using HTTP. Monitoring of per-process metrics are enabled with this service.",
            "ServiceID": "process-exporter_check_http",
            "Success_before_passing": 3,
            "Timeout": "5s"
            }
          ]
        }
      }
  - path: /tmp/waiter.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      # Script to do all the waiting
      service="$1"
      if [[ $service == "process-exporter" ]]; then
        # process-exporter
        while true; do
          # Get the status of the process-exporter_check_http check
          status=$(dig @127.0.0.1 -p 8600 ${name}.process-exporter.service.consul SRV | awk '/SRV.*${fqdn}\.$/ {print $1}')

          if [[ $status == "${name}.process-exporter.service.consul." ]]; then
            echo "process-exporter check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "process-exporter check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "proxysql" ]]; then
        # proxysql
        while true; do
          # Get the status of the Proxysql check
          status=$(dig @127.0.0.1 -p 8600 proxysql.service.consul SRV | awk '/SRV.*proxysql.${environment_name}.local.$/ {print $1}')

          if [[ $status == "proxysql.service.consul." ]]; then
            echo "ProxySQL check is passing."
            exit 0
          fi

          # If the check is not passing, wait for a short interval and try again
          echo "ProxySQL check is not passing. Will retry in 3 seconds..."
          sleep 3
        done
      elif [[ $service == "readyz" ]] ; then
        # PMM readyz
        while true; do
          # Check for DNS :facepalm:
          dnsstatus=$(dig pmm-server.${environment_name}.local A | awk '/A.*10.*$/ {print $1}')

          if [[ $dnsstatus == "pmm-server.${environment_name}.local." ]]; then
            echo "PMMreadyz_check_http DNS check is passing."

            # Get the status of the PMMreadyz_check_http check
            status=$(dig @127.0.0.1 -p 8600 pmmreadyz.service.consul SRV | awk '/SRV.*bastion.${environment_name}.local.$/ {print $1}')
        
            if [[ $status == "pmmreadyz.service.consul." ]]; then
              echo "PMMreadyz_check_http check is passing."
              exit 0  
            fi
          else
            echo "PMMreadyz_check_http DNS check is not passing."
          fi
          # If the check is not passing, wait for a short interval and try again
          echo "PMMreadyz_check_http check is not passing. Will retry in 1 second..."
          sleep 1
        done
      fi
  - path: /root/consul-advertise-addr.sh
    permissions: "0700"
    content: |
      #!/bin/bash
      my_private_ip=$(ip a sh eth0 | awk '/inet / {print $2}' | awk -F '/' '{print $1}')
      echo "advertise_addr = \"$my_private_ip\"" >> /etc/consul.d/consul.hcl

  - path: /root/ansible.yml
    permissions: "0400"
    content: |
      ---
      # This playbook contains tasks executed for pmmdemo
      - hosts: localhost
        become: yes
        gather_facts: yes
        tasks:
          - name: Set Google Analytics ID
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: google_analytics_ua_id
              value: ${google_analytics_id}

          - name: Enable anonymous access (readonly)
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth.anonymous
              option: enabled
              value: "true"

          - name: Set domain name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: server
              option: domain
              value: ${full_domain}

          - name: Disable telemetry
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: reporting_enabled
              value: "false"

          - name: Disable updates
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: check_for_updates
              value: "false"

          - name: Enable alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: alerting
              option: enabled
              value: "false"

          - name: Enable secure cookies
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: security
              option: cookie_secure
              value: "true"

          - name: Set auth cookie name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_cookie_name
              value: pmm_session

          - name: Set max login duration
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_maximum_lifetime_duration
              value: 7d

          - name: Enable unified alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: unified_alerting
              option: enabled
              value: "true"

          - name: Set instance name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: DEFAULT
              option: instance_name
              value: "PMM Demo"

          - name: Enable panel alpha feature
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: panels
              option: enable_alpha
              value: "true"

          - name: Configure PMM's connection to the Portal
            when: ${oauth_enable}
            block:
            # TODO use loop instead block here
            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: enabled
                value: "true"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: name
                value: "Percona Account"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_id
                value: ${oauth_client_id}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_secret
                value: ${oauth_secret}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: scopes
                value: ${oauth_scopes}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: auth_url
                value: ${oauth_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: token_url
                value: ${oauth_token_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: api_url
                value: ${oauth_api_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: role_attribute_path
                value: ${oauth_role_attribute_path}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth
                option: signout_redirect_url
                value: ${oauth_signout_redirect_url}

  - path: /root/volume-backup.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      docker run --rm --volumes-from pmm-data -v /root/backup:/backup busybox tar czvf /backup/backup-$(date "+%F").tar /srv

  - path: /root/upgrade-pmm.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      docker pull percona/pmm-server:2

      docker stop pmm-server
      docker rm pmm-server

      docker run -d -p 443:443 -p 80:80 --volumes-from pmm-data --name pmm-server --restart always percona/pmm-server:2
      echo "PMM Server has been successfully upgraded to the next version. Don't forget to purge the old image."

      bash /root/apply-custom-settings.sh

  - path: /root/apply-custom-settings.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      echo "Running the ansible script..."
      docker cp /root/ansible.yml pmm-server:/root/ansible.yml
      docker exec pmm-server ansible-playbook -v /root/ansible.yml
      docker exec pmm-server supervisorctl restart grafana
      echo "PMM settings updated."
