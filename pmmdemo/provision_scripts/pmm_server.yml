#cloud-config
preserve_hostname: false
hostname: ${name}
fqdn: ${fqdn}
manage_etc_hosts: true
repo_upgrade: all

packages:
  - curl
  - lsof
  - nmap
  - htop
  - mc
  - jq
  - docker
  - git
  - yum-utils

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 5; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /var/lib/docker/

mounts:
  - ["/dev/nvme1n1", "/var/lib/docker/", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - systemctl enable docker
  - service docker start
  - usermod -a -G docker ec2-user
  - yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
  - yum -y install consul
  - systemctl enable consul
  - systemctl start consul
  - yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm
  - percona-release setup -y ps-80
  - yum -y install percona-server-client
  - docker pull percona/pmm-server:2
  - docker volume create pmm-data || true
  - docker run -d -p 443:443 -p 80:80 -v pmm-data:/srv --name pmm-server --restart always percona/pmm-server:2
  - sleep 20s
  - docker exec pmm-server change-admin-password ${pmm_admin_pass}
  - "echo '${pmm_admin_pass}' > /root/pmm-admin-password"
  - chmod 400 /root/pmm-admin-password
  - docker cp /root/ansible.yml pmm-server:/root/ansible.yml
  - docker exec pmm-server ansible-playbook -v /root/ansible.yml
  - docker exec pmm-server supervisorctl restart grafana

write_files:
  - path: /etc/consul.d/consul.hcl
    permissions: "0644"
    content: |
      bind_addr = "0.0.0.0"
      bootstrap_expect=3
      client_addr = "0.0.0.0"
      data_dir = "/opt/consul"
      enable_local_script_checks = true
      node_name="${name}"
      retry_join = ["pmm-server", "sysbench", "proxysql"]
      server = true
      ui_config{
        enabled = true
      }
  - path: /etc/consul.d/pmm-readyz.json
    permissions: "0644"
    content: |
      {
        "service": {
          "id": "PMMreadyz",
          "name": "PMMreadyz",
          "checks": [
            {
              "args": ["curl", "--silent", "--insecure", "https://pmm-server/v1/readyz"],
            "interval": "10s"
            }
          ]
        }
      }
  - path: /root/ansible.yml
    permissions: "0400"
    content: |
      ---
      # This playbook contains tasks executed for pmmdemo
      - hosts: localhost
        become: yes
        gather_facts: yes
        tasks:
          - name: Set Google Analytics ID
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: google_analytics_ua_id
              value: ${google_analytics_id}

          - name: Enable anonymous access (readonly)
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth.anonymous
              option: enabled
              value: "true"

          - name: Set domain name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: server
              option: domain
              value: ${full_domain}

          - name: Disable telemetry
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: reporting_enabled
              value: "false"

          - name: Disable updates
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: check_for_updates
              value: "false"

          - name: Enable alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: alerting
              option: enabled
              value: "false"

          - name: Enable secure cookies
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: security
              option: cookie_secure
              value: "true"

          - name: Set auth cookie name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_cookie_name
              value: pmm_session

          - name: Set max login duration
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth
              option: login_maximum_lifetime_duration
              value: 7d

          - name: Enable unified alerting
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: unified_alerting
              option: enabled
              value: "true"

          - name: Set instance name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: DEFAULT
              option: instance_name
              value: "PMM Demo"

          - name: Enable panel alpha feature
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: panels
              option: enable_alpha
              value: "true"

          - name: Configure PMM's connection to the Portal
            when: ${oauth_enable}
            block:
            # TODO use loop instead block here
            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: enabled
                value: "true"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: name
                value: "Percona Account"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_id
                value: ${oauth_client_id}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_secret
                value: ${oauth_secret}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: scopes
                value: ${oauth_scopes}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: auth_url
                value: ${oauth_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: token_url
                value: ${oauth_token_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: api_url
                value: ${oauth_api_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: role_attribute_path
                value: ${oauth_role_attribute_path}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth
                option: signout_redirect_url
                value: ${oauth_signout_redirect_url}
  - path: /root/volume-backup.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      docker run --rm --volumes-from pmm-data -v /root/backup:/backup busybox tar czvf /backup/backup-$(date "+%F").tar /srv
  - path: /root/upgrade-pmm.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      docker pull percona/pmm-server:2

      docker stop pmm-server
      docker rm pmm-server

      docker run -d -p 443:443 -p 80:80 --volumes-from pmm-data --name pmm-server --restart always percona/pmm-server:2
      echo "PMM Server has been successfully upgraded to the next version. Don't forget to purge the old image."

      bash /root/apply-custom-settings.sh
  - path: /root/apply-custom-settings.sh
    permissions: "0755"
    content: |
      #!/bin/bash -xe

      echo "Running the ansible script..."
      docker cp /root/ansible.yml pmm-server:/root/ansible.yml
      docker exec pmm-server ansible-playbook -v /root/ansible.yml
      docker exec pmm-server supervisorctl restart grafana
      echo "PMM settings updated."
