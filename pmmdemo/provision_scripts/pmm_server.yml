#cloud-config
preserve_hostname: false
hostname: ${name}
fqdn: ${fqdn}
manage_etc_hosts: true
repo_upgrade: all

packages:
  - curl
  - lsof
  - nmap
  - htop
  - mc
  - jq
  - docker
  - git

bootcmd:
  - while [[ ! -b $(readlink -f /dev/nvme1n1) ]]; do echo "waiting for the disk..."; sleep 3; done
  - mkfs.xfs -L data /dev/nvme1n1
  - mkdir -p /var/lib/docker/

mounts:
  - ["/dev/nvme1n1", "/var/lib/docker/", "xfs", "defaults,noatime", "0", "2"]

runcmd:
  - systemctl enable docker
  - service docker start
  - usermod  -a -G docker ec2-user
  - curl -fsSL https://www.percona.com/get/pmm -o /tmp/pmm.sh
  - sed -i -e 's/:443/:443 -p 80:80/g' /tmp/pmm.sh
  - /bin/bash /tmp/pmm.sh
  - sleep 20s
  - docker exec pmm-server change-admin-password ${pmm_admin_pass}
  - "echo '${pmm_admin_pass}' > /root/pmm-admin-password"
  - chmod 400 /root/pmm-admin-password
  - docker cp /root/ansible.yml pmm-server:/root/ansible.yml
  - docker exec pmm-server ansible-playbook /root/ansible.yml
  - docker exec pmm-server supervisorctl restart grafana

write_files:
  - path: /root/ansible.yml
    permissions: "0400"
    content: |
      ---
      # This playbook contains tasks executed for pmmdemo
      - hosts: localhost
        become: yes
        gather_facts: yes
        tasks:
          - name: Set Google Analytics ID
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: analytics
              option: google_analytics_ua_id
              value: ${google_analytics_id}

          - name: Enable anonymous access (readonly)
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: auth.anonymous
              option: enabled
              value: "true"

          - name: Set domain name
            ini_file:
              dest: /etc/grafana/grafana.ini
              section: server
              option: domain
              value: ${full_domain}

          - name: Configure PMM's connection to the Portal
            when: ${oauth_enable}
            block:
            # TODO use loop instead block here
            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: enabled
                value: "true"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: name
                value: "Percona Account"

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_id
                value: ${oauth_client_id}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: client_secret
                value: ${oauth_secret}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: scopes
                value: ${oauth_scopes}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: auth_url
                value: ${oauth_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: token_url
                value: ${oauth_token_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: api_url
                value: ${oauth_api_url}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth.generic_oauth
                option: role_attribute_path
                value: ${oauth_role_attribute_path}

            - ini_file:
                dest: /etc/grafana/grafana.ini
                section: auth
                option: signout_redirect_url
                value: ${oauth_signout_redirect_url}
